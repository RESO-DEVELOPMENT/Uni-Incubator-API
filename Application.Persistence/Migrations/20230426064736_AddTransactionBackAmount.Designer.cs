// <auto-generated />
using System;
using Application.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Application.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230426064736_AddTransactionBackAmount")]
    partial class AddTransactionBackAmount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Application.Domain.Models.Attribute", b =>
                {
                    b.Property<Guid>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttributeGroupId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeId");

                    b.HasIndex("AttributeGroupId");

                    b.ToTable("Attributes");
                });

            modelBuilder.Entity("Application.Domain.Models.AttributeGroup", b =>
                {
                    b.Property<string>("AttributeGroupId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AttributeGroupDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttributeGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeGroupId");

                    b.ToTable("AttributeGroups");
                });

            modelBuilder.Entity("Application.Domain.Models.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LevelId"));

                    b.Property<double>("BasePoint")
                        .HasColumnType("float");

                    b.Property<double>("BasePointPerHour")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LevelColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Loyal")
                        .HasColumnType("float");

                    b.Property<double>("MaxWorkHour")
                        .HasColumnType("float");

                    b.Property<double>("MinWorkHour")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double>("XPNeeded")
                        .HasColumnType("float");

                    b.HasKey("LevelId");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("Application.Domain.Models.Member", b =>
                {
                    b.Property<Guid>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CertCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FacebookUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MemberStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberAttribute", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("MemberAttributes");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberFile", b =>
                {
                    b.Property<Guid>("MemberFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberFileId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SystemFileId");

                    b.ToTable("MemberFiles");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("int");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("LevelId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberLevel");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberVoucher", b =>
                {
                    b.Property<Guid>("MemberVoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberVoucherId");

                    b.HasIndex("MemberId");

                    b.HasIndex("VoucherId");

                    b.ToTable("MemberVouchers");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberWallet", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberId", "WalletId");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("MemberWallets");
                });

            modelBuilder.Entity("Application.Domain.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("MemberId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Application.Domain.Models.Payslip", b =>
                {
                    b.Property<Guid>("PayslipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SalaryCycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("PayslipId");

                    b.HasIndex("MemberId");

                    b.HasIndex("SalaryCycleId");

                    b.ToTable("Payslip");
                });

            modelBuilder.Entity("Application.Domain.Models.PayslipAttribute", b =>
                {
                    b.Property<Guid>("PayslipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PayslipId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("PayslipAttribute");
                });

            modelBuilder.Entity("Application.Domain.Models.PayslipItem", b =>
                {
                    b.Property<Guid>("PayslipItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PayslipId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Token")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("PayslipItemId");

                    b.HasIndex("PayslipId");

                    b.HasIndex("ProjectId");

                    b.ToTable("PayslipItem");
                });

            modelBuilder.Entity("Application.Domain.Models.PayslipItemAttribute", b =>
                {
                    b.Property<Guid>("PayslipItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PayslipItemId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("PayslipItemAttribute");
                });

            modelBuilder.Entity("Application.Domain.Models.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProjectLongDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjectStatus")
                        .HasColumnType("int");

                    b.Property<int>("ProjectType")
                        .HasColumnType("int");

                    b.Property<int>("ProjectVisibility")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectId");

                    b.HasIndex("ProjectName")
                        .IsUnique();

                    b.HasIndex("ProjectShortName")
                        .IsUnique();

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectFile", b =>
                {
                    b.Property<Guid>("ProjectFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectFileId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SystemFileId");

                    b.ToTable("ProjectFiles");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMember", b =>
                {
                    b.Property<Guid>("ProjectMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectMemberId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMemberAttribute", b =>
                {
                    b.Property<Guid>("ProjectMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectMemberId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("ProjectMemberAttributes");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMemberRequest", b =>
                {
                    b.Property<Guid>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("RequestId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMemberRequests");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMilestone", b =>
                {
                    b.Property<Guid>("ProjectMilestoneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectMilestoneId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMilestones");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReport", b =>
                {
                    b.Property<Guid>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SalaryCycleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SalaryCycleId");

                    b.ToTable("ProjectReports");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReportMember", b =>
                {
                    b.Property<Guid>("ProjectReportMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectReportId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectReportMemberId");

                    b.HasIndex("ProjectMemberId");

                    b.HasIndex("ProjectReportId");

                    b.ToTable("ProjectReportMembers");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReportMemberAttribute", b =>
                {
                    b.Property<Guid>("ProjectReportMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectReportMemberId", "AttributeId");

                    b.HasIndex("AttributeId");

                    b.ToTable("ProjectReportMemberAttribute");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReportMemberTask", b =>
                {
                    b.Property<Guid>("ProjectReportMemberTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BonusReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectReportMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("TaskBonus")
                        .HasColumnType("float");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TaskHour")
                        .HasColumnType("float");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TaskPoint")
                        .HasColumnType("float");

                    b.Property<double>("TaskRealHour")
                        .HasColumnType("float");

                    b.HasKey("ProjectReportMemberTaskId");

                    b.HasIndex("ProjectReportMemberId");

                    b.ToTable("ProjectReportMemberTasks");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectSponsor", b =>
                {
                    b.Property<Guid>("ProjectSponsorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SponsorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProjectSponsorId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SponsorId");

                    b.ToTable("ProjectSponsors");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectSponsorTransaction", b =>
                {
                    b.Property<Guid>("ProjectSponsonTracsactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ProjectSponsorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ProjectSponsonTracsactionId");

                    b.HasIndex("ProjectSponsorId");

                    b.ToTable("ProjectSponsorTransaction");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectWallet", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProjectId", "WalletId");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("ProjectWallets");
                });

            modelBuilder.Entity("Application.Domain.Models.Role", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Application.Domain.Models.SalaryCycle", b =>
                {
                    b.Property<Guid>("SalaryCycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaryCycleStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SalaryCycleId");

                    b.ToTable("SalaryCycles");
                });

            modelBuilder.Entity("Application.Domain.Models.Sponsor", b =>
                {
                    b.Property<Guid>("SponsorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SponsorDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SponsorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SponsorStatus")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("SponsorId");

                    b.ToTable("Sponsors");
                });

            modelBuilder.Entity("Application.Domain.Models.SponsorFile", b =>
                {
                    b.Property<Guid>("SponsorFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<Guid>("SponsorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SystemFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SponsorFileId");

                    b.HasIndex("SponsorId");

                    b.HasIndex("SystemFileId");

                    b.ToTable("SponsorFiles");
                });

            modelBuilder.Entity("Application.Domain.Models.SystemFile", b =>
                {
                    b.Property<Guid>("SystemFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DirectUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("SystemFileId");

                    b.ToTable("SystemFiles");
                });

            modelBuilder.Entity("Application.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("FromAmountAfterTransaction")
                        .HasColumnType("float");

                    b.Property<Guid>("FromWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PayslipItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ToAmountAfterTransaction")
                        .HasColumnType("float");

                    b.Property<Guid>("ToWalletId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Token")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("FromWalletId");

                    b.HasIndex("PayslipItemId");

                    b.HasIndex("ToWalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Application.Domain.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("LoginType")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordChangeToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PasswordChangeTokenExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserStatus")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Application.Domain.Models.UserFCMToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "Token");

                    b.ToTable("UserFCMTokens");
                });

            modelBuilder.Entity("Application.Domain.Models.Voucher", b =>
                {
                    b.Property<Guid>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VoucherAmount")
                        .HasColumnType("int");

                    b.Property<double>("VoucherCost")
                        .HasColumnType("float");

                    b.Property<string>("VoucherDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoucherId");

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("Application.Domain.Models.VoucherFile", b =>
                {
                    b.Property<Guid>("VoucherFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<Guid>("SystemFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VoucherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VoucherFileId");

                    b.HasIndex("SystemFileId");

                    b.HasIndex("VoucherId");

                    b.ToTable("VoucherFiles");
                });

            modelBuilder.Entity("Application.Domain.Models.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiredDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<int>("TargetType")
                        .HasColumnType("int");

                    b.Property<int>("WalletStatus")
                        .HasColumnType("int");

                    b.Property<string>("WalletTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WalletToken")
                        .HasColumnType("int");

                    b.Property<int>("WalletType")
                        .HasColumnType("int");

                    b.HasKey("WalletId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Application.Domain.Models.Attribute", b =>
                {
                    b.HasOne("Application.Domain.Models.AttributeGroup", "AttributeGroup")
                        .WithMany("Attributes")
                        .HasForeignKey("AttributeGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttributeGroup");
                });

            modelBuilder.Entity("Application.Domain.Models.Member", b =>
                {
                    b.HasOne("Application.Domain.Models.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("Application.Domain.Models.Member", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberAttribute", b =>
                {
                    b.HasOne("Application.Domain.Models.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberFile", b =>
                {
                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany("MemberFiles")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.SystemFile", "SystemFile")
                        .WithMany("MemberFiles")
                        .HasForeignKey("SystemFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SystemFile");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberLevel", b =>
                {
                    b.HasOne("Application.Domain.Models.Level", "Level")
                        .WithMany("MemberLevels")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany("MemberLevels")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberVoucher", b =>
                {
                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany("MemberVouchers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Voucher", "Voucher")
                        .WithMany("MemberVouchers")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Application.Domain.Models.MemberWallet", b =>
                {
                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany("MemberWallets")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Wallet", "Wallet")
                        .WithOne("MemberWallet")
                        .HasForeignKey("Application.Domain.Models.MemberWallet", "WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Application.Domain.Models.Notification", b =>
                {
                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Application.Domain.Models.Payslip", b =>
                {
                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.SalaryCycle", "SalaryCycle")
                        .WithMany("Payslips")
                        .HasForeignKey("SalaryCycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("SalaryCycle");
                });

            modelBuilder.Entity("Application.Domain.Models.PayslipAttribute", b =>
                {
                    b.HasOne("Application.Domain.Models.Attribute", "Attribute")
                        .WithMany("PayslipAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Payslip", "Payslip")
                        .WithMany("PayslipAttributes")
                        .HasForeignKey("PayslipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Payslip");
                });

            modelBuilder.Entity("Application.Domain.Models.PayslipItem", b =>
                {
                    b.HasOne("Application.Domain.Models.Payslip", "Payslip")
                        .WithMany("PayslipItems")
                        .HasForeignKey("PayslipId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Project", "Project")
                        .WithMany("PayslipItems")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Payslip");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Application.Domain.Models.PayslipItemAttribute", b =>
                {
                    b.HasOne("Application.Domain.Models.Attribute", "Attribute")
                        .WithMany("PayslipItemAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.PayslipItem", "PayslipItem")
                        .WithMany("PayslipItemAttributes")
                        .HasForeignKey("PayslipItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("PayslipItem");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectFile", b =>
                {
                    b.HasOne("Application.Domain.Models.Project", "Project")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.SystemFile", "SystemFile")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("SystemFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("SystemFile");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMember", b =>
                {
                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Project", "Project")
                        .WithMany("ProjectMember")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMemberAttribute", b =>
                {
                    b.HasOne("Application.Domain.Models.Attribute", "Attribute")
                        .WithMany("ProjectMemberAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.ProjectMember", "ProjectMember")
                        .WithMany("ProjectMemberAttributes")
                        .HasForeignKey("ProjectMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("ProjectMember");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMemberRequest", b =>
                {
                    b.HasOne("Application.Domain.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Project", "Project")
                        .WithMany("ProjectMemberRequests")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMilestone", b =>
                {
                    b.HasOne("Application.Domain.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReport", b =>
                {
                    b.HasOne("Application.Domain.Models.Project", "Project")
                        .WithMany("ProjectReports")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.SalaryCycle", "SalaryCycle")
                        .WithMany("ProjectReports")
                        .HasForeignKey("SalaryCycleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("SalaryCycle");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReportMember", b =>
                {
                    b.HasOne("Application.Domain.Models.ProjectMember", "ProjectMember")
                        .WithMany("ProjectMemberReports")
                        .HasForeignKey("ProjectMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.ProjectReport", "ProjectReport")
                        .WithMany("ProjectReportMembers")
                        .HasForeignKey("ProjectReportId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectMember");

                    b.Navigation("ProjectReport");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReportMemberAttribute", b =>
                {
                    b.HasOne("Application.Domain.Models.Attribute", "Attribute")
                        .WithMany("ProjectReportMemberAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.ProjectReportMember", "ProjectReportMember")
                        .WithMany("ProjectReportMemberAttributes")
                        .HasForeignKey("ProjectReportMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("ProjectReportMember");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReportMemberTask", b =>
                {
                    b.HasOne("Application.Domain.Models.ProjectReportMember", "ProjectReportMember")
                        .WithMany("ProjectReportMemberTasks")
                        .HasForeignKey("ProjectReportMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectReportMember");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectSponsor", b =>
                {
                    b.HasOne("Application.Domain.Models.Project", "Project")
                        .WithMany("ProjectSponsors")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Sponsor", "Sponsor")
                        .WithMany("ProjectSponsors")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Sponsor");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectSponsorTransaction", b =>
                {
                    b.HasOne("Application.Domain.Models.ProjectSponsor", "ProjectSponsor")
                        .WithMany("ProjectSponsorTransactions")
                        .HasForeignKey("ProjectSponsorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectSponsor");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectWallet", b =>
                {
                    b.HasOne("Application.Domain.Models.Project", "Project")
                        .WithMany("ProjectWallets")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Wallet", "Wallet")
                        .WithOne("ProjectWallet")
                        .HasForeignKey("Application.Domain.Models.ProjectWallet", "WalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Application.Domain.Models.SponsorFile", b =>
                {
                    b.HasOne("Application.Domain.Models.Sponsor", "Sponsor")
                        .WithMany("SponsorFiles")
                        .HasForeignKey("SponsorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.SystemFile", "SystemFile")
                        .WithMany("SponsorFiles")
                        .HasForeignKey("SystemFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sponsor");

                    b.Navigation("SystemFile");
                });

            modelBuilder.Entity("Application.Domain.Models.Transaction", b =>
                {
                    b.HasOne("Application.Domain.Models.Wallet", "FromWallet")
                        .WithMany("TransactionsFrom")
                        .HasForeignKey("FromWalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.PayslipItem", "PayslipItem")
                        .WithMany("Transactions")
                        .HasForeignKey("PayslipItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Application.Domain.Models.Wallet", "ToWallet")
                        .WithMany("TransactionsTo")
                        .HasForeignKey("ToWalletId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromWallet");

                    b.Navigation("PayslipItem");

                    b.Navigation("ToWallet");
                });

            modelBuilder.Entity("Application.Domain.Models.User", b =>
                {
                    b.HasOne("Application.Domain.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Application.Domain.Models.UserFCMToken", b =>
                {
                    b.HasOne("Application.Domain.Models.User", "User")
                        .WithMany("UserFCMTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Application.Domain.Models.VoucherFile", b =>
                {
                    b.HasOne("Application.Domain.Models.SystemFile", "SystemFile")
                        .WithMany("VoucherFiles")
                        .HasForeignKey("SystemFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Application.Domain.Models.Voucher", "Voucher")
                        .WithMany("VoucherFiles")
                        .HasForeignKey("VoucherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SystemFile");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("Application.Domain.Models.Attribute", b =>
                {
                    b.Navigation("PayslipAttributes");

                    b.Navigation("PayslipItemAttributes");

                    b.Navigation("ProjectMemberAttributes");

                    b.Navigation("ProjectReportMemberAttributes");
                });

            modelBuilder.Entity("Application.Domain.Models.AttributeGroup", b =>
                {
                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("Application.Domain.Models.Level", b =>
                {
                    b.Navigation("MemberLevels");
                });

            modelBuilder.Entity("Application.Domain.Models.Member", b =>
                {
                    b.Navigation("MemberFiles");

                    b.Navigation("MemberLevels");

                    b.Navigation("MemberVouchers");

                    b.Navigation("MemberWallets");

                    b.Navigation("ProjectMembers");
                });

            modelBuilder.Entity("Application.Domain.Models.Payslip", b =>
                {
                    b.Navigation("PayslipAttributes");

                    b.Navigation("PayslipItems");
                });

            modelBuilder.Entity("Application.Domain.Models.PayslipItem", b =>
                {
                    b.Navigation("PayslipItemAttributes");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Application.Domain.Models.Project", b =>
                {
                    b.Navigation("PayslipItems");

                    b.Navigation("ProjectFiles");

                    b.Navigation("ProjectMember");

                    b.Navigation("ProjectMemberRequests");

                    b.Navigation("ProjectReports");

                    b.Navigation("ProjectSponsors");

                    b.Navigation("ProjectWallets");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectMember", b =>
                {
                    b.Navigation("ProjectMemberAttributes");

                    b.Navigation("ProjectMemberReports");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReport", b =>
                {
                    b.Navigation("ProjectReportMembers");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectReportMember", b =>
                {
                    b.Navigation("ProjectReportMemberAttributes");

                    b.Navigation("ProjectReportMemberTasks");
                });

            modelBuilder.Entity("Application.Domain.Models.ProjectSponsor", b =>
                {
                    b.Navigation("ProjectSponsorTransactions");
                });

            modelBuilder.Entity("Application.Domain.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Application.Domain.Models.SalaryCycle", b =>
                {
                    b.Navigation("Payslips");

                    b.Navigation("ProjectReports");
                });

            modelBuilder.Entity("Application.Domain.Models.Sponsor", b =>
                {
                    b.Navigation("ProjectSponsors");

                    b.Navigation("SponsorFiles");
                });

            modelBuilder.Entity("Application.Domain.Models.SystemFile", b =>
                {
                    b.Navigation("MemberFiles");

                    b.Navigation("ProjectFiles");

                    b.Navigation("SponsorFiles");

                    b.Navigation("VoucherFiles");
                });

            modelBuilder.Entity("Application.Domain.Models.User", b =>
                {
                    b.Navigation("Member")
                        .IsRequired();

                    b.Navigation("UserFCMTokens");
                });

            modelBuilder.Entity("Application.Domain.Models.Voucher", b =>
                {
                    b.Navigation("MemberVouchers");

                    b.Navigation("VoucherFiles");
                });

            modelBuilder.Entity("Application.Domain.Models.Wallet", b =>
                {
                    b.Navigation("MemberWallet");

                    b.Navigation("ProjectWallet");

                    b.Navigation("TransactionsFrom");

                    b.Navigation("TransactionsTo");
                });
#pragma warning restore 612, 618
        }
    }
}
